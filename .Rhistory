library(dplyr)
library(reticulate)
paths = read.csv(paste0(path.expand('~'), '/paths.csv'), col.names = c('input_folder', 'processed_folder', 'support_folder', 'spam_folder', 'gyga_folder', 'health_edu_folder', 'home_repo_folder', 'pythonfolder'), header = FALSE, colClasses = 'character')
use_python(paths$pythonfolder, required = T)
source_python(paste0(paths$home_repo_folder, 'manual_parameters.py'))
sf = read.dbf(paste0(paths$home_repo_folder, 'onsset/input/Assist2/iter16.dbf'), as.is = TRUE)
#Select fields
sf = dplyr::select(sf, pop2015KEN, id, Area, AgriDemand, Commercial, EducationD, HealthDema, windveloci, ghisolarad, traveltime, elevationm, terraslope, landcoverm, nightlight, Substation, EX_HV, PL_HV, Roads, HydroDist, Hydropower, HydroFID, ElecPop, Conflict, Residentia, PerCapitaD, IsUrbanmaj, X, Y, latlon_X, latlon_Y, Transforme) #EX_MV, PL_MV)
sf = dplyr::rename(sf, X_deg=X, Y_deg=Y, X = latlon_X, Y=latlon_Y, Pop=pop2015KEN, CurrentHVLineDist=EX_HV, PlannedHVLineDist = PL_HV, RoadDist = Roads, NightLights = nightlight, TravelHours=traveltime, GHI=ghisolarad, WindVel=windveloci, Hydropower=Hydropower, HydropowerFID=HydroFID, HydropowerDist=HydroDist, SubstationDist=Substation, Elevation=elevationm, Slope=terraslope, LandCover=landcoverm, IsUrban=IsUrbanmaj, Conflict=Conflict, ResidentialDemandTierCustom=Residentia, AgriDemand=AgriDemand, HealthDemand=HealthDema, EducationDemand=EducationD, CommercialDemand=Commercial, GridCellArea=Area, ElecPop=ElecPop, TransformerDist=Transforme, ID=id, PerCapitaDemand=PerCapitaD)
sf$Country=countryiso3
sf$CurrentMVLineDist= 0
sf$PlannedMVLineDist= 0
#sf$CurrentHVLineDist = sf$GridDistCurrent
#sf$PlannedHVLineDist = sf$GridDistPlan
sf$ElectrificationOrder=0
is.nan.data.frame <- function(x){
do.call(cbind, lapply(x, is.nan))
}
sf[is.nan.data.frame(sf)] <- 0
sf = as.data.frame(sf)
sf$HydropowerDist = as.numeric(sf$HydropowerDist)
sf$TravelHours = ifelse(sf$TravelHours<0, 0, sf$TravelHours)
#sf[sf<0] <- 0
write.dbf(paste0(paths$home_repo_folder, 'onsset/input/Assist2/iter16.dbf'), as.is = TRUE)
write.csv(sf, paste0(paths$home_repo_folder, 'onsset/input/Assist/', countryiso3, '.csv'), row.names = FALSE)
library(foreign)
library(dplyr)
library(reticulate)
paths = read.csv(paste0(path.expand('~'), '/paths.csv'), col.names = c('input_folder', 'processed_folder', 'support_folder', 'spam_folder', 'gyga_folder', 'health_edu_folder', 'home_repo_folder', 'pythonfolder'), header = FALSE, colClasses = 'character')
use_python(paths$pythonfolder, required = T)
source_python(paste0(paths$home_repo_folder, 'manual_parameters.py'))
sf = read.dbf(paste0(paths$home_repo_folder, 'onsset/input/Assist2/iter16.dbf'), as.is = TRUE)
#Select fields
sf = dplyr::select(sf, pop2015KEN, id, Area, AgriDemand, Commercial, EducationD, HealthDema, windveloci, ghisolarad, traveltime, elevationm, terraslope, landcoverm, nightlight, Substation, EX_HV, PL_HV, Roads, HydroDist, Hydropower, HydroFID, ElecPop, Conflict, Residentia, PerCapitaD, IsUrbanmaj, X, Y, latlon_X, latlon_Y, Transforme) #EX_MV, PL_MV)
sf = dplyr::rename(sf, X_deg=X, Y_deg=Y, X = latlon_X, Y=latlon_Y, Pop=pop2015KEN, CurrentHVLineDist=EX_HV, PlannedHVLineDist = PL_HV, RoadDist = Roads, NightLights = nightlight, TravelHours=traveltime, GHI=ghisolarad, WindVel=windveloci, Hydropower=Hydropower, HydropowerFID=HydroFID, HydropowerDist=HydroDist, SubstationDist=Substation, Elevation=elevationm, Slope=terraslope, LandCover=landcoverm, IsUrban=IsUrbanmaj, Conflict=Conflict, ResidentialDemandTierCustom=Residentia, AgriDemand=AgriDemand, HealthDemand=HealthDema, EducationDemand=EducationD, CommercialDemand=Commercial, GridCellArea=Area, ElecPop=ElecPop, TransformerDist=Transforme, ID=id, PerCapitaDemand=PerCapitaD)
sf$Country=countryiso3
sf$CurrentMVLineDist= 0
sf$PlannedMVLineDist= 0
#sf$CurrentHVLineDist = sf$GridDistCurrent
#sf$PlannedHVLineDist = sf$GridDistPlan
sf$ElectrificationOrder=0
is.nan.data.frame <- function(x){
do.call(cbind, lapply(x, is.nan))
}
sf[is.nan.data.frame(sf)] <- 0
sf = as.data.frame(sf)
sf$HydropowerDist = as.numeric(sf$HydropowerDist)
sf$TravelHours = ifelse(sf$TravelHours<0, 0, sf$TravelHours)
#sf[sf<0] <- 0
write.dbf(paste0(paths$home_repo_folder, 'onsset/input/Assist2/iter16.dbf'))
write.csv(sf, paste0(paths$home_repo_folder, 'onsset/input/Assist/', countryiso3, '.csv'), row.names = FALSE)
library(foreign)
library(dplyr)
library(reticulate)
paths = read.csv(paste0(path.expand('~'), '/paths.csv'), col.names = c('input_folder', 'processed_folder', 'support_folder', 'spam_folder', 'gyga_folder', 'health_edu_folder', 'home_repo_folder', 'pythonfolder'), header = FALSE, colClasses = 'character')
use_python(paths$pythonfolder, required = T)
source_python(paste0(paths$home_repo_folder, 'manual_parameters.py'))
sf = read.dbf(paste0(paths$home_repo_folder, 'onsset/input/Assist2/iter16.dbf'), as.is = TRUE)
#Select fields
sf = dplyr::select(sf, pop2015KEN, id, Area, AgriDemand, Commercial, EducationD, HealthDema, windveloci, ghisolarad, traveltime, elevationm, terraslope, landcoverm, nightlight, Substation, EX_HV, PL_HV, Roads, HydroDist, Hydropower, HydroFID, ElecPop, Conflict, Residentia, PerCapitaD, IsUrbanmaj, X, Y, latlon_X, latlon_Y, Transforme) #EX_MV, PL_MV)
sf = dplyr::rename(sf, X_deg=X, Y_deg=Y, X = latlon_X, Y=latlon_Y, Pop=pop2015KEN, CurrentHVLineDist=EX_HV, PlannedHVLineDist = PL_HV, RoadDist = Roads, NightLights = nightlight, TravelHours=traveltime, GHI=ghisolarad, WindVel=windveloci, Hydropower=Hydropower, HydropowerFID=HydroFID, HydropowerDist=HydroDist, SubstationDist=Substation, Elevation=elevationm, Slope=terraslope, LandCover=landcoverm, IsUrban=IsUrbanmaj, Conflict=Conflict, ResidentialDemandTierCustom=Residentia, AgriDemand=AgriDemand, HealthDemand=HealthDema, EducationDemand=EducationD, CommercialDemand=Commercial, GridCellArea=Area, ElecPop=ElecPop, TransformerDist=Transforme, ID=id, PerCapitaDemand=PerCapitaD)
sf$Country=countryiso3
sf$CurrentMVLineDist= 0
sf$PlannedMVLineDist= 0
#sf$CurrentHVLineDist = sf$GridDistCurrent
#sf$PlannedHVLineDist = sf$GridDistPlan
sf$ElectrificationOrder=0
is.nan.data.frame <- function(x){
do.call(cbind, lapply(x, is.nan))
}
sf[is.nan.data.frame(sf)] <- 0
sf = as.data.frame(sf)
sf$HydropowerDist = as.numeric(sf$HydropowerDist)
sf$TravelHours = ifelse(sf$TravelHours<0, 0, sf$TravelHours)
#sf[sf<0] <- 0
write.dbf(sf, paste0(paths$home_repo_folder, 'onsset/input/Assist2/iter16.dbf'), as.is = TRUE, overwrite=TRUE)
write.csv(sf, paste0(paths$home_repo_folder, 'onsset/input/Assist/', countryiso3, '.csv'), row.names = FALSE)
library(foreign)
library(dplyr)
library(reticulate)
paths = read.csv(paste0(path.expand('~'), '/paths.csv'), col.names = c('input_folder', 'processed_folder', 'support_folder', 'spam_folder', 'gyga_folder', 'health_edu_folder', 'home_repo_folder', 'pythonfolder'), header = FALSE, colClasses = 'character')
use_python(paths$pythonfolder, required = T)
source_python(paste0(paths$home_repo_folder, 'manual_parameters.py'))
sf = read.dbf(paste0(paths$home_repo_folder, 'onsset/input/Assist2/iter16.dbf'), as.is = TRUE)
#Select fields
sf = dplyr::select(sf, pop2015KEN, id, Area, AgriDemand, Commercial, EducationD, HealthDema, windveloci, ghisolarad, traveltime, elevationm, terraslope, landcoverm, nightlight, Substation, EX_HV, PL_HV, Roads, HydroDist, Hydropower, HydroFID, ElecPop, Conflict, Residentia, PerCapitaD, IsUrbanmaj, X, Y, latlon_X, latlon_Y, Transforme) #EX_MV, PL_MV)
sf = dplyr::rename(sf, X_deg=X, Y_deg=Y, X = latlon_X, Y=latlon_Y, Pop=pop2015KEN, CurrentHVLineDist=EX_HV, PlannedHVLineDist = PL_HV, RoadDist = Roads, NightLights = nightlight, TravelHours=traveltime, GHI=ghisolarad, WindVel=windveloci, Hydropower=Hydropower, HydropowerFID=HydroFID, HydropowerDist=HydroDist, SubstationDist=Substation, Elevation=elevationm, Slope=terraslope, LandCover=landcoverm, IsUrban=IsUrbanmaj, Conflict=Conflict, ResidentialDemandTierCustom=Residentia, AgriDemand=AgriDemand, HealthDemand=HealthDema, EducationDemand=EducationD, CommercialDemand=Commercial, GridCellArea=Area, ElecPop=ElecPop, TransformerDist=Transforme, ID=id, PerCapitaDemand=PerCapitaD)
sf$Country=countryiso3
sf$CurrentMVLineDist= 0
sf$PlannedMVLineDist= 0
#sf$CurrentHVLineDist = sf$GridDistCurrent
#sf$PlannedHVLineDist = sf$GridDistPlan
sf$ElectrificationOrder=0
is.nan.data.frame <- function(x){
do.call(cbind, lapply(x, is.nan))
}
sf[is.nan.data.frame(sf)] <- 0
sf = as.data.frame(sf)
sf$HydropowerDist = as.numeric(sf$HydropowerDist)
sf$TravelHours = ifelse(sf$TravelHours<0, 0, sf$TravelHours)
#sf[sf<0] <- 0
write.dbf(sf, paste0(paths$home_repo_folder, 'onsset/input/Assist2/iter16.dbf'), as.is = TRUE, overwrite=TRUE)
#sf[sf<0] <- 0
write.dbf(sf, paste0(paths$home_repo_folder, 'onsset/input/Assist2/iter16.dbf'))
write.csv(sf, paste0(paths$home_repo_folder, 'onsset/input/Assist/', countryiso3, '.csv'), row.names = FALSE)
paths$home_repo_folder
install.packages("recipes")
remove.packages("caret")
install.packages("caret", dependencies = TRUE)
library(caret)
library(ggplot2)
library(raster)
library(margins)
library(sf)
library(eia)
library(cowplot)
library(ggsci)
library(gridExtra)
library(googledrive)
library(RColorBrewer)
library(jtools)
library(tidyverse)
library(foreign)
library(frm)
library(sandwich)
library(lmtest)
library(ggpmisc)
library(estimatr)
library(readr)
library(splitstackshape)
library(lfstat)
library(wbstats)
library(Amelia)
library(padr)
library(zoo)
library(hydroGOF)
library(imputeTS)
library(hddtools)
library(lfstat)
library(ggplot2)
library(plotly)
library(reshape2)
library(data.table)
library(tidyverse)
library(stargazer)
library(lubridate)
library(reshape2)
library(readxl)
library(fields)
library(chron)
library(ncdf4)
library(raster)
library(robustbase)
library(rgdal)
library(raster)
tmp <- installed.packages()
installedpkgs <- as.vector(tmp[is.na(tmp[,"Priority"]), 1])
save(installedpkgs, file="installed_old.rda")
tmp <- installed.packages()
installedpkgs.new <- as.vector(tmp[is.na(tmp[,"Priority"]), 1])
missing <- setdiff(installedpkgs, installedpkgs.new)
install.packages(missing)
update.packages()
load("~/installed_old.rda")
tmp <- installed.packages()
installedpkgs.new <- as.vector(tmp[is.na(tmp[,"Priority"]), 1])
missing <- setdiff(installedpkgs, installedpkgs.new)
install.packages(missing)
update.packages()
update.packages()
library(foreign)
library(dplyr)
library(reticulate)
paths = read.csv(paste0(path.expand('~'), '/paths.csv'), col.names = c('input_folder', 'processed_folder', 'support_folder', 'spam_folder', 'gyga_folder', 'health_edu_folder', 'home_repo_folder', 'pythonfolder'), header = FALSE, colClasses = 'character')
use_python(paths$pythonfolder, required = T)
source_python(paste0(paths$home_repo_folder, 'manual_parameters.py'))
sf = read.dbf(paste0(paths$home_repo_folder, 'onsset/input/Assist2/iter16.dbf'), as.is = TRUE)
#Select fields
sf = dplyr::select(sf, pop2015KEN, id, Area, AgriDemand, Commercial, EducationD, HealthDema, windveloci, ghisolarad, traveltime, elevationm, terraslope, landcoverm, nightlight, Substation, EX_HV, PL_HV, Roads, HydroDist, Hydropower, HydroFID, ElecPop, Conflict, Residentia, PerCapitaD, IsUrbanmaj, X, Y, latlon_X, latlon_Y, Transforme) #EX_MV, PL_MV)
sf = dplyr::rename(sf, X_deg=X, Y_deg=Y, X = latlon_X, Y=latlon_Y, Pop=pop2015KEN, CurrentHVLineDist=EX_HV, PlannedHVLineDist = PL_HV, RoadDist = Roads, NightLights = nightlight, TravelHours=traveltime, GHI=ghisolarad, WindVel=windveloci, Hydropower=Hydropower, HydropowerFID=HydroFID, HydropowerDist=HydroDist, SubstationDist=Substation, Elevation=elevationm, Slope=terraslope, LandCover=landcoverm, IsUrban=IsUrbanmaj, Conflict=Conflict, ResidentialDemandTierCustom=Residentia, AgriDemand=AgriDemand, HealthDemand=HealthDema, EducationDemand=EducationD, CommercialDemand=Commercial, GridCellArea=Area, ElecPop=ElecPop, TransformerDist=Transforme, ID=id, PerCapitaDemand=PerCapitaD)
sf$Country=countryiso3
sf$CurrentMVLineDist= 0
sf$PlannedMVLineDist= 0
#sf$CurrentHVLineDist = sf$GridDistCurrent
#sf$PlannedHVLineDist = sf$GridDistPlan
sf$ElectrificationOrder=0
is.nan.data.frame <- function(x){
do.call(cbind, lapply(x, is.nan))
}
sf[is.nan.data.frame(sf)] <- 0
sf = as.data.frame(sf)
sf$HydropowerDist = as.numeric(sf$HydropowerDist)
sf$TravelHours = ifelse(sf$TravelHours<0, 0, sf$TravelHours)
#sf[sf<0] <- 0
write.dbf(sf, paste0(paths$home_repo_folder, 'onsset/input/Assist2/iter16.dbf'))
write.csv(sf, paste0(paths$home_repo_folder, 'onsset/input/Assist/', countryiso3, '.csv'), row.names = FALSE)
library(foreign)
library(dplyr)
library(reticulate)
paths = read.csv(paste0(path.expand('~'), '/paths.csv'), col.names = c('input_folder', 'processed_folder', 'support_folder', 'spam_folder', 'gyga_folder', 'health_edu_folder', 'home_repo_folder', 'pythonfolder'), header = FALSE, colClasses = 'character')
use_python(paths$pythonfolder, required = T)
source_python(paste0(paths$home_repo_folder, 'manual_parameters.py'))
sf = read.dbf(paste0(paths$home_repo_folder, 'onsset/input/Assist2/iter16.dbf'), as.is = TRUE)
colnames(sf)
library(foreign)
library(dplyr)
library(reticulate)
paths = read.csv(paste0(path.expand('~'), '/paths.csv'), col.names = c('input_folder', 'processed_folder', 'support_folder', 'spam_folder', 'gyga_folder', 'health_edu_folder', 'home_repo_folder', 'pythonfolder'), header = FALSE, colClasses = 'character')
use_python(paths$pythonfolder, required = T)
source_python(paste0(paths$home_repo_folder, 'manual_parameters.py'))
sf = read.dbf(paste0(paths$home_repo_folder, 'onsset/input/Assist2/iter16.dbf'), as.is = TRUE)
library(foreign)
library(dplyr)
library(reticulate)
paths = read.csv(paste0(path.expand('~'), '/paths.csv'), col.names = c('input_folder', 'processed_folder', 'support_folder', 'spam_folder', 'gyga_folder', 'health_edu_folder', 'home_repo_folder', 'pythonfolder'), header = FALSE, colClasses = 'character')
use_python(paths$pythonfolder, required = T)
source_python(paste0(paths$home_repo_folder, 'manual_parameters.py'))
sf = read.dbf(paste0(paths$home_repo_folder, 'onsset/input/Assist2/iter16.dbf'), as.is = TRUE)
#Select fields
sf = dplyr::select(sf, pop2015KEN, id, Area, AgriDemand, Commercial, EducationD, HealthDema, windveloci, ghisolarad, traveltime, elevationm, terraslope, landcoverm, nightlight, Substation, EX_HV, PL_HV, Roads, HydroDist, Hydropower, HydroFID, ElecPop, Conflict, Residentia, PerCapitaD, IsUrbanmaj, X, Y, latlon_X, latlon_Y, Transforme) #EX_MV, PL_MV)
sf = dplyr::rename(sf, X_deg=X, Y_deg=Y, X = latlon_X, Y=latlon_Y, Pop=pop2015KEN, CurrentHVLineDist=EX_HV, PlannedHVLineDist = PL_HV, RoadDist = Roads, NightLights = nightlight, TravelHours=traveltime, GHI=ghisolarad, WindVel=windveloci, Hydropower=Hydropower, HydropowerFID=HydroFID, HydropowerDist=HydroDist, SubstationDist=Substation, Elevation=elevationm, Slope=terraslope, LandCover=landcoverm, IsUrban=IsUrbanmaj, Conflict=Conflict, ResidentialDemandTierCustom=Residentia, AgriDemand=AgriDemand, HealthDemand=HealthDema, EducationDemand=EducationD, CommercialDemand=Commercial, GridCellArea=Area, ElecPop=ElecPop, TransformerDist=Transforme, ID=id, PerCapitaDemand=PerCapitaD)
sf$Country=countryiso3
sf$CurrentMVLineDist= 0
sf$PlannedMVLineDist= 0
#sf$CurrentHVLineDist = sf$GridDistCurrent
#sf$PlannedHVLineDist = sf$GridDistPlan
sf$ElectrificationOrder=0
is.nan.data.frame <- function(x){
do.call(cbind, lapply(x, is.nan))
}
sf[is.nan.data.frame(sf)] <- 0
sf = as.data.frame(sf)
sf$HydropowerDist = as.numeric(sf$HydropowerDist)
sf$TravelHours = ifelse(sf$TravelHours<0, 0, sf$TravelHours)
colnames(sf)
write.csv(sf, paste0(paths$home_repo_folder, 'onsset/input/Assist/', countryiso3, '.csv'), row.names = FALSE, quote = FALSE)
View(sf)
is.nan.data.frame <- function(x){
do.call(cbind, lapply(x, is.na))
}
sf[is.nan.data.frame(sf)] <- 0
sf = as.data.frame(sf)
sf$HydropowerDist = as.numeric(sf$HydropowerDist)
sf$TravelHours = ifelse(sf$TravelHours<0, 0, sf$TravelHours)
is.nan.data.frame <- function(x){
do.call(cbind, lapply(x, is.na))
}
sf[is.nan.data.frame(sf)] <- 0
sf = as.data.frame(sf)
write.csv(sf, paste0(paths$home_repo_folder, 'onsset/input/Assist/', countryiso3, '.csv'), row.names = FALSE, quote = FALSE)
write.csv(sf, paste0(paths$home_repo_folder, 'onsset/input/Assist/', countryiso3, '.csv'), row.names = FALSE, quote = FALSE)
write.csv(sf, paste0(paths$home_repo_folder, 'onsset/input/Assist/', countryiso3, '.csv'), row.names = FALSE)
write.csv(sf, paste0(paths$home_repo_folder, 'onsset/input/Assist/', countryiso3, '.csv'), row.names = FALSE)
write.csv(sf, paste0(paths$home_repo_folder, 'onsset/input/Assist/', countryiso3, '.csv'), row.names = FALSE, quote = FALSE)
load("D:/OneDrive - FONDAZIONE ENI ENRICO MATTEI/Current papers/Inequal accessibility to services in sub-Saharan Africa/envy.RData")
library(readxl)
library(dplyr)
library(raster)
library(sf)
library(foreign)
library(splitstackshape)
library(ggplot2)
library(gglorenz)
library(cowplot)
View(X)
### split by country
y=list()
View(X)
for (i in 1:20){
y[[i]] = dplyr::select(X[[i]], -countries_layer)
y[[i]] = splitstackshape::expandRows(y[[i]], "population")
}
X2 = do.call("rbind", y)
X2$ISO3 = as.character(X2$ISO3)
X2_ss = subset(X2, x2$ISO3 == "KEN" | x2$ISO3 == "COD" | x2$ISO3 == "TZA" | x2$ISO3 == "ZAF" | x2$ISO3 == "ETH" | x2$ISO3 == "NGA")
X2_ss = subset(X2, x2$ISO3 == "KEN" | x2$ISO3 == "COD" | x2$ISO3 == "TZA" | x2$ISO3 == "ZAF" | x2$ISO3 == "ETH" | x2$ISO3 == "NGA")
X2$ISO3
unique(X2$ISO3)
X2_ss = subset(X2, x2$ISO3 == "KEN" | x2$ISO3 == "COD" | x2$ISO3 == "TZA" | x2$ISO3 == "ZAF" | x2$ISO3 == "ETH" | x2$ISO3 == "NGA")
X2_ss = subset(X2, x2$ISO3 == "KEN" | x2$ISO3 == "COD" | x2$ISO3 == "TZA" | x2$ISO3 == "ZAF" | x2$ISO3 == "ETH" | x2$ISO3 == "NGA")
View(X2)
library(raster)
library(ncdf4)
library(RNetCDF)
library(googledrive)
library(data.table)
library(dplyr)
library(ggplot2)
library(scales)
library(ggpmisc)
library(wbstats)
library(ggrepel)
library(ineq)
library(sf)
library(cowplot)
library(rworldmap)
library(rgdal)
library(reshape2)
library(latex2exp)
library(tidyr)
library(sf)
library(rgdal)
library(ggthemes)
library(RColorBrewer)
library(gtools)
data = stack("pop_noaccess-0000000000-0000014848.tif")
#Google Drive authentication (to be run before launching the entire script)
drive_find(n_max = 30)
#0) Generate the NetCDF4 dataset for people without access
drive_download("pop_noaccess-0000000000-0000014848.tif", type = "tif", overwrite = TRUE)
drive_download("pop15.tif", type = "tif", overwrite = TRUE)
data = stack("pop_noaccess-0000000000-0000014848.tif", "pop15.tif")
pop_noacc = brick("pop_noaccess-0000000000-0000014848.tif")
pop15 = raster("pop15.tif")
pop15 = crop(pop15, extent(pop_noacc))
data = stack(pop_noacc, pop15)
pop_noacc = brick("D:/OneDrive - FONDAZIONE ENI ENRICO MATTEI/Completed papers/INEQUALITY ASSESSMENT/Dataset/noaccess_SSA_2014_2018.nc")
pop15 = raster("pop15.tif")
data = stack(pop_noacc, pop15)
pop15 = crop(pop15, pop_noacc)
data = stack(pop_noacc, pop15)
library(haven)
Tanzania_ORIO_TZ18_village_electrification <- read_dta("C:/Users/GIACOMO/Desktop/MCC/Survey data/Tanzania_ORIO-TZ18_village_electrification.dta")
View(Tanzania_ORIO_TZ18_village_electrification)
gsub( " .*$", "", Tanzania_ORIO_TZ18_village_electrification$gps )
View(Tanzania_ORIO_TZ18_village_electrification)
library(sf)
library(sf)
read_sf('D:/OneDrive - FONDAZIONE ENI ENRICO MATTEI/Current papers/Prod_Uses_Agriculture/PrElGen_database_SSA/healthcare.shp')
library(dplyr)
hc <- read_sf('D:/OneDrive - FONDAZIONE ENI ENRICO MATTEI/Current papers/Prod_Uses_Agriculture/PrElGen_database_SSA/healthcare.shp')
hc1 <- hc %>% filter(Tier == 1)
hc1 <- hc %>% filter(Tier == 1)
hc2 <- hc %>% filter(Tier == 2)
hc3 <- hc %>% filter(Tier == 3)
hc4 <- hc %>% filter(Tier == 4)
write_sf("hc1.shp", hc1)
write_sf(hc1, "hc1.shp")
library(sf)
library(dplyr)
hc <- read_sf('D:/OneDrive - FONDAZIONE ENI ENRICO MATTEI/Current papers/Prod_Uses_Agriculture/PrElGen_database_SSA/healthcare.shp')
hc1 <- hc %>% filter(Tier == 1)
write_sf(hc1, "hc1.shp")
hc2 <- hc %>% filter(Tier == 2)
write_sf(hc1, "hc2.shp")
hc3 <- hc %>% filter(Tier == 3)
write_sf(hc1, "hc3.shp")
hc4 <- hc %>% filter(Tier == 4)
write_sf(hc1, "hc4.shp")
hc <- read_sf('D:/OneDrive - FONDAZIONE ENI ENRICO MATTEI/Current papers/Prod_Uses_Agriculture/PrElGen_database/health_edu_folder/Kenya_Open_Data_Initiative_KODI_Primary_Schools.shp')
colnames(hc)
View(hc)
hc1 <- hc %>% filter(sch_type1 == 1)
write_sf(hc1, "sch1.shp")
hc2 <- hc %>% filter(sch_type2 == 2)
write_sf(hc1, "sch2.shp")
hc <- read_sf('D:/OneDrive - FONDAZIONE ENI ENRICO MATTEI/Current papers/Prod_Uses_Agriculture/PrElGen_database/health_edu_folder/Kenya_Open_Data_Initiative_KODI_Primary_Schools.shp')
atabase/health_edu_folder/Kenya_Open_Data_Initiative_KODI_Primary_Schools.shp')
hc <- read_sf('D:/OneDrive - FONDAZIONE ENI ENRICO MATTEI/Current papers/Prod_Uses_Agriculture/PrElGen_database/health_edu_folder/Kenya_Open_Data_Initiative_KODI_Primary_Schools.shp')
hc1 <- hc %>% filter(sch_type1 == 1)
write_sf(hc1, "sch1.shp")
hc2 <- hc %>% filter(sch_type2 == 2)
write_sf(hc1, "sch2.shp")
hc3 <- hc %>% filter(sch_type3 == 3)
write_sf(hc1, "sch3.shp")
hc4 <- hc %>% filter(sch_type4 == 4)
View(hc)
hc1 <- hc %>% filter(sch_type1 == 1)
write_sf(hc1, "sch1.shp")
library(dplyr)
hc <- read_sf('D:/OneDrive - FONDAZIONE ENI ENRICO MATTEI/Current papers/Prod_Uses_Agriculture/PrElGen_database/health_edu_folder/Kenya_Open_Data_Initiative_KODI_Primary_Schools.shp')
hc1 <- hc %>% filter(sch_type1 == 1)
write_sf(hc1, "sch1.shp")
hc2 <- hc %>% filter(sch_type2 == 1)
write_sf(hc1, "sch2.shp")
hc3 <- hc %>% filter(sch_type3 == 1)
write_sf(hc1, "sch3.shp")
hc4 <- hc %>% filter(sch_type4 == 1)
write_sf(hc1, "sch4.shp")
hc5 <- hc %>% filter(sch_type5 == 1)
write_sf(hc1, "sch5.shp")
hc <- read_sf('D:/OneDrive - FONDAZIONE ENI ENRICO MATTEI/Current papers/Prod_Uses_Agriculture/PrElGen_database/health_edu_folder/Kenya_Open_Data_Initiative_KODI_Primary_Schools.shp')
library(sf)
library(dplyr)
hc <- read_sf('D:/OneDrive - FONDAZIONE ENI ENRICO MATTEI/Current papers/Prod_Uses_Agriculture/PrElGen_database/health_edu_folder/Kenya_Open_Data_Initiative_KODI_Primary_Schools.shp')
hc1 <- hc %>% filter(sch_type1 == 1)
write_sf(hc1, "sch1.shp")
hc2 <- hc %>% filter(sch_type2 == 1)
write_sf(hc2, "sch2.shp")
hc3 <- hc %>% filter(sch_type3 == 1)
write_sf(hc3, "sch3.shp")
hc4 <- hc %>% filter(sch_type4 == 1)
write_sf(hc4, "sch4.shp")
hc5 <- hc %>% filter(sch_type5 == 1)
write_sf(hc5, "sch5.shp")
setwd('D:\OneDrive - FONDAZIONE ENI ENRICO MATTEI\Completed papers\INEQUALITY ASSESSMENT\One Earth\Revision 1\inequality_electrification_SSA')
setwd('D:\\OneDrive - FONDAZIONE ENI ENRICO MATTEI\\Completed papers\\INEQUALITY ASSESSMENT\\One Earth\\Revision 1\\inequality_electrification_SSA')
library(sf)
library(raster)
library(googledrive)
library(data.table)
library(dplyr)
library(ggplot2)
library(scales)
library(plyr)
library(ggpmisc)
library(wbstats)
library(ggrepel)
library(ineq)
library(cowplot)
library(rworldmap)
library(rgdal)
library(reshape2)
library(tidyr)
library(readxl)
library(rgdal)
library(ggthemes)
library(RColorBrewer)
library(gtools)
library(grid)
library(countrycode)
library(spatstat)
library(exactextractr)
library(stargazer)
#Import data for populaiton and population without access
drive_download("input_data/pop.csv", type = "csv", overwrite = TRUE)
pop = read.csv("input_data/pop.csv")
no_acc = read.csv("input_data/no_acc.csv")
#Merge different years, remove non Sub-Saharan countries and other misc provinces
merged = merge(pop, no_acc, by=c("GID_1"), all=TRUE)
merged=subset(merged, GID_0.x != "ATF" & GID_0.x != "EGY" & GID_0.x != "ESH"& GID_0.x != "ESP" & GID_0.x != "LBY" & GID_0.x != "MAR" & GID_0.x != "MYT" & GID_0.x != "SYC" & GID_0.x != "COM" & GID_0.x != "YEM" & GID_0.x != "TUN" & GID_0.x != "DZA" & GID_0.x != "SHN" & GID_0.x != "DJI" & GID_0.x != "STP")
merged = dplyr::filter(merged,  !is.na(GID_0.x))
#Calculate province-level electrification rates and merge them into a single dataframe
merged$elrate19=(1-(merged$noacc19 / merged$pop19))
merged$elrate18=(1-(merged$noacc18 / merged$pop18))
merged$elrate17=(1-(merged$noacc17 / merged$pop17))
merged$elrate16=(1-(merged$noacc16 / merged$pop16))
merged$elrate15=(1-(merged$noacc15 / merged$pop15))
merged$elrate14=(1-(merged$noacc14 / merged$pop14))
elrates = merged
#Calculate the change in electrification rates over 2018-2014
elrates$eldiff = elrates$elrate19 - elrates$elrate14
#Calculate national electrification rates
merged_countrylevel = merged %>% group_by(GID_0.x) %>% dplyr::summarize(pop19=sum(pop19,na.rm = T), noacc19=sum(noacc19,na.rm = T), pop18=sum(pop18,na.rm = T), noacc18=sum(noacc18,na.rm = T), pop17=sum(pop17,na.rm = T), noacc17=sum(noacc17,na.rm = T), pop16=sum(pop16,na.rm = T), noacc16=sum(noacc16,na.rm = T), pop15=sum(pop15,na.rm = T), noacc15=sum(noacc15,na.rm = T), pop14=sum(pop14,na.rm = T), noacc14=sum(noacc14,na.rm = T)) %>% ungroup()
merged_countrylevel$elrate19 = (1-(merged_countrylevel$noacc19/merged_countrylevel$pop19))
merged_countrylevel$elrate18 = (1-(merged_countrylevel$noacc18/merged_countrylevel$pop18))
merged_countrylevel$elrate17 = (1-(merged_countrylevel$noacc17/merged_countrylevel$pop17))
merged_countrylevel$elrate16 = (1-(merged_countrylevel$noacc16/merged_countrylevel$pop16))
merged_countrylevel$elrate15 = (1-(merged_countrylevel$noacc15/merged_countrylevel$pop15))
merged_countrylevel$elrate14 = (1-(merged_countrylevel$noacc14/merged_countrylevel$pop14))
merged_diff=merged_countrylevel
merged_diff <- na.omit(merged_diff)
merged_diff$gainedaccess = (merged_diff$elrate19*merged_diff$pop19) - (merged_diff$elrate14*merged_diff$pop14)
merged_diff$gainedperday = merged_diff$gainedaccess / 2190
merged_diff$elrate_diff = merged_diff$elrate19 - merged_diff$elrate14
natpop19 = sum(merged_diff$pop19)
natpop14 = sum(merged_diff$pop14)
a = sum(merged_diff$elrate19*merged_diff$pop19)
b = sum(merged_diff$elrate14*merged_diff$pop14)
a-b
# Calculate SSA-wide change in people without access
c = sum(merged_diff$pop19) - sum(merged_diff$elrate19*merged_diff$pop19)
c2 = sum(merged_diff$pop14) - sum(merged_diff$elrate14*merged_diff$pop14)
# Calculate SSA-wide change in electricity access level
d =  sum(merged_diff$elrate19*merged_diff$pop19) / sum(merged_diff$pop19)
e = sum(merged_diff$elrate14*merged_diff$pop14) / sum(merged_diff$pop14)
# Calculate SSA-wide change in population
f =   sum(merged_diff$pop19) -  sum(merged_diff$pop14)
sum(merged_diff$pop19)/sum(merged_diff$pop14)
# Calculate SSA-wide 2019 population
k = sum(merged_diff$pop19)
# Calculate number of people with electricity access in 2014 and 2019
a = sum(merged_diff$pop19)*0.446
b = sum(merged_diff$pop14)*0.38
# Calculate the average number of people who have gained access every year between 2014 and 2019
yearly_average = (a-b)/6
a = sum(merged_diff$elrate19*merged_diff$pop19)
b = sum(merged_diff$elrate14*merged_diff$pop14)
a-b
# Calculate SSA-wide change in people without access
c = sum(merged_diff$pop19) - sum(merged_diff$elrate19*merged_diff$pop19)
c2 = sum(merged_diff$pop14) - sum(merged_diff$elrate14*merged_diff$pop14)
# Calculate SSA-wide change in electricity access level
d =  sum(merged_diff$elrate19*merged_diff$pop19) / sum(merged_diff$pop19)
e = sum(merged_diff$elrate14*merged_diff$pop14) / sum(merged_diff$pop14)
# Calculate SSA-wide change in population
f =   sum(merged_diff$pop19) -  sum(merged_diff$pop14)
sum(merged_diff$pop19)/sum(merged_diff$pop14)
# Calculate SSA-wide 2019 population
k = sum(merged_diff$pop19)
# Calculate number of people with electricity access in 2014 and 2019
a = sum(merged_diff$pop19)*0.446
b = sum(merged_diff$pop14)*0.38
# Calculate the average number of people who have gained access every year between 2014 and 2019
yearly_average = (a-b)/6
yearly_average
d-e
d
e
yearly_average
# Calculate how many people would have access in 2030 if the same pace of 2014-2019 is kept
elrate_in2030_baseline = 1- (((c + (1400000000-k)*(1-d)) - (yearly_average)*10)/1400000000)
elrate_in2030_baseline
elrate_in2030_baseline-d
# Calculate SSA-wide change in people without access
c = sum(merged_diff$pop19) - sum(merged_diff$elrate19*merged_diff$pop19)
c
k
d
75/10
74/22
0.37*1400000000
